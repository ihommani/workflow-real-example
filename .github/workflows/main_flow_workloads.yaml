name: Workloads integration, delivery and deployment
run-name: "${{ github.actor }} triggered global workload CI/CD"

on:
    push:
        branches: 
             - main
             - release
        tags:
            - v[0-9]+.[0-9]+.[0-9]+
        paths: 
            - frontend/**
            - backend/**
    # workflow_dispatch: # TODO : integrate the production logic inside this workflow. (too many if ? )
    # What can be done with workflow_run event ? 


    #TODO: we miss the next version bump definition. 

    

jobs:
    get_env:
        runs-on: ubuntu-22.04
        outputs:
            environment: ${{ steps.get_env.outputs.environment }}
        steps:
            - uses: actions/checkout@v4 

            - name: guess environment
              id: get_env
              uses: ./.github/actions/get_workload_flow_env

    # TODO: documenter dans le README pk la CI n'est pas souhaitable pour des contextes où l'output est une image docker agnostique de l'env, alors qu'elle l'est sur la partie infra (config et couts différents par env, )
    frontend_integration:
        if: contains(fromJSON('["integration"]'), needs.get_env.outputs.environment)
        needs: get_env
        permissions: 
            pull-requests: 
                write
        uses: ./.github/workflows/frontend_integration.yaml


    backend_integration:
        if: contains(fromJSON('["integration"]'), needs.get_env.outputs.environment)
        needs: get_env
        uses: ./.github/workflows/backend_integration.yaml


    container_integration:
        if: contains(fromJSON('["integration"]'), needs.get_env.outputs.environment)
        needs: get_env
        uses: ./.github/workflows/container_integration.yaml

    collect_env_variables_of_interest:
        if: github.event_name != 'workflow_dispatch'
        needs: get_env
        uses: ./.github/workflows/_get_env_var_of_interest.yaml
        with:
          environment: ${{ needs.get_env.outputs.environment }}

        
    container_delivery:
        needs: [collect_env_variables_of_interest, backend_integration, frontend_integration, container_integration, get_env]
        uses: ./.github/workflows/container_delivery.yaml
        # environment: --> cannot be used in a job calling a subworkflow. Needs the 'collect_env_variables_of_interest' job to collect env values and inject it below
        with:
            files: |           
                ./frontend/**
                ./backend/**
            files_ignore: |
                **/*.md
            project_id: ${{ needs.collect_env_variables_of_interest.outputs.project_id }}
            repository_id: ${{ needs.collect_env_variables_of_interest.outputs.repository_id }} 
            workload_identity_provider: ${{ needs.collect_env_variables_of_interest.outputs.workload_identity_provider }}
            service_account_to_impersonate: ${{ needs.collect_env_variables_of_interest.outputs.service_account_to_impersonate }}
            region: ${{ needs.collect_env_variables_of_interest.outputs.region }}
            environment: ${{ needs.get_env.outputs.environment }}

    workloads_deployment:
        if: github.ref_name == 'main' || github.ref_name == 'release'
        needs: [container_delivery, get_env]
        uses: ./.github/workflows/workload_deployment.yaml
        with:
            environment: ${{ needs.get_env.outputs.environment }}
            tag: ${{ github.sha }}

    # TODO: final job : push the badge status. This task should always run even in case of previous task failure