name: Create release packages
run-name: '${{ github.actor }} triggers release creation'

on:
    workflow_call:
      inputs:
        next_release_version:
          description: release version which will serve as tag for the new package
          required: true
          type: string 
        project_id:
          description: id of the project entity hosting package repository
          required: true
          type: string 
        repository_id:
          description: Image repository id
          required: true
          type: string
        workload_identity_provider:
          description: Identifier of the concrete workload identity provider.
          required: true
          type: string
        service_account_to_impersonate:
          description: Identity to impersonate through the workload identity provider
          required: true
          type: string
        region:
          description: Region of the concrete artifactory service
          required: true
          type: string

jobs:

    list_release_candidate_packages:
      runs-on: ubuntu-22.04
      permissions:
        contents: 'read'
        id-token: 'write'
      outputs:
        package_names: ${{ steps.list_release_candidates.outputs.package_names }}
      steps:
        - uses: actions/checkout@v4

        - name: list release candidate packages
          id: list_release_candidates
          uses: ./.github/actions/list_images_from_cloud_artifactory
          with:
            project_id: ${{ inputs.project_id }} 
            repository_id: ${{ inputs.repository_id }}
            workload_identity_provider: ${{ inputs.workload_identity_provider }}
            service_account_to_impersonate: ${{ inputs.service_account_to_impersonate }}
            region: ${{ inputs.region }}


    set_release_version_on_packages:
      runs-on: ubuntu-22.04
      permissions:
        contents: 'read'
        id-token: 'write'
      needs: [list_release_candidate_packages]
      strategy:
          matrix: 
            artifact_to_tag: ${{ fromJson(needs.list_release_candidate_packages.outputs.package_names) }}
      steps:
        - uses: actions/checkout@v4

        - name: tag packages
          id: tag_packages
          uses: ./.github/actions/tag_image
          with:
            project_id: ${{ inputs.project_id }} 
            repository_id: ${{ inputs.repository_id }}
            region: ${{ inputs.region }}
            workload_identity_provider: ${{ inputs.workload_identity_provider }}
            service_account_to_impersonate: ${{ inputs.service_account_to_impersonate }}
            image_name: ${{ matrix.artifact_to_tag }}
            tag: ${{ inputs.next_release_version }}

            

    # Below jobs are only needed if we have different artifacto registry repositories per env. 
    # The best practice is to avoid this situation with image agnostic to the environment and which behavior is configured through environment variables
    # We should avoid to rebuild images. A single version should transit between environments


    # expose_sta_vars:
    #   runs-on: ubuntu-22.04
    #   environment: staging
    #   outputs:
    #     PROJECT_ID: ${{ vars.PROJECT_ID }}
    #     REPOSITORY_ID: ${{ vars.REPOSITORY_ID }}
    #     WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
    #     SA_TO_IMPERSONATE: ${{ vars.SA_TO_IMPERSONATE }}
    #     CLOUD_REGION: ${{ vars.CLOUD_REGION }}
    #   steps:
    #     - name: Exposing staging env vars
    #       run: echo "Exposing staging env vars"

    # collect_env_variables_of_interest_production:
    # expose_prd_vars:
    #   runs-on: ubuntu-22.04
    #   environment: production
    #   outputs:
    #     PROJECT_ID: ${{ vars.PROJECT_ID }}
    #     REPOSITORY_ID: ${{ vars.REPOSITORY_ID }}
    #     WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
    #     SA_TO_IMPERSONATE: ${{ vars.SA_TO_IMPERSONATE }}
    #     CLOUD_REGION: ${{ vars.CLOUD_REGION }}
    #   steps:
    #     - name: Exposing production env vars
    #       run: echo "Exposing production env vars"
        
    # package_delivery_on_staging:
    #     needs: [expose_sta_vars]
    #     uses: ./.github/workflows/container_delivery.yaml
    #     # environment: --> cannot be used in a job calling a subworkflow. 
    #     # Hacky solution: Needs the 'collect_env_variables_of_interest' job to collect env values and inject it below by consuming the ouput of the job
    #     with:
    #         files: |           
    #             ./frontend/**
    #             ./backend/**
    #         files_ignore: |
    #             **/*.md
    #         project_id: ${{ needs.expose_sta_vars.outputs.PROJECT_ID }}
    #         repository_id: ${{ needs.expose_sta_vars.outputs.REPOSITORY_ID }} 
    #         workload_identity_provider: ${{ needs.expose_sta_vars.outputs.WORKLOAD_IDENTITY_PROVIDER }}
    #         service_account_to_impersonate: ${{ needs.expose_sta_vars.outputs.SA_TO_IMPERSONATE }}
    #         region: ${{ needs.expose_sta_vars.outputs.CLOUD_REGION }}
    #         environment: staging
    #         release_tag: ${{ needs.compute_next_semver_version.outputs.next }}
        
    # package_delivery_on_production:
    #     needs: [expose_prd_vars]
    #     uses: ./.github/workflows/container_delivery.yaml
    #     # environment: --> cannot be used in a job calling a subworkflow. 
    #     # Hacky solution: Needs the 'collect_env_variables_of_interest' job to collect env values and inject it below by consuming the ouput of the job
    #     with:
    #         files: |           
    #             ./frontend/**
    #             ./backend/**
    #         files_ignore: |
    #             **/*.md
    #         project_id: ${{ needs.expose_prd_vars.outputs.PROJECT_ID }}
    #         repository_id: ${{ needs.expose_prd_vars.outputs.REPOSITORY_ID }} 
    #         workload_identity_provider: ${{ needs.expose_prd_vars.outputs.WORKLOAD_IDENTITY_PROVIDER }}
    #         service_account_to_impersonate: ${{ needs.expose_prd_vars.outputs.SA_TO_IMPERSONATE }}
    #         region: ${{ needs.expose_prd_vars.outputs.CLOUD_REGION }}
    #         environment: staging
    #         release_tag: ${{ needs.compute_next_semver_version.outputs.next }}



          
      
        
    
        
        
      
    
          
      