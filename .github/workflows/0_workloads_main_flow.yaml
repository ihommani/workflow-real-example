name: Workloads integration, delivery and deployment
run-name: "${{ github.actor }} triggered main CI/CD pipeline"

on:
    push:
        branches: 
             - main
        paths: 
            - frontend/**
            - backend/**
            - '!*.md'

jobs:
    # TODO: documenter dans le README pk la CI n'est pas souhaitable pour des contextes où l'output est une image docker agnostique de l'env, alors qu'elle l'est sur la partie infra (config et couts différents par env, )
    frontend_integration:
        permissions: 
            pull-requests: 
                write
        uses: ./.github/workflows/frontend_integration.yaml


    backend_integration:
        uses: ./.github/workflows/backend_integration.yaml


    container_integration:
        uses: ./.github/workflows/container_integration.yaml

    # TODO: document in the README: we collect env variable in the main workflow definition to stream collected values up to the concrete workflow/actions
    # sub level workflow should not call "env" or "vars". they should consume the inputs they declare only. It's a kind of interface of what it needs to work
    # Ease the reuse of the workflow which does not impose to run with specific github environments (we may share the worklaod through dedicated github repo)
    collect_env_variables_of_interest:
        uses: ./.github/workflows/_get_env_var_of_interest.yaml
        with:
          environment: integration # we consider 'integration' as the default environment in this main workflow

    expose_vars:
      runs-on: ubuntu-latest
      # we consider 'integration' as the associated environment to the default branch
      environment: integration
      outputs:
        PROJECT_ID: ${{ vars.PROJECT_ID }}
        REPOSITORY_ID: ${{ vars.REPOSITORY_ID }}
        WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        SA_TO_IMPERSONATE: ${{ vars.SA_TO_IMPERSONATE }}
        CLOUD_REGION: ${{ vars.CLOUD_REGION }}
      steps:
        - name: Exposing env vars
          run: echo "Exposing env vars"

    container_delivery:
        needs: [expose_vars, backend_integration, frontend_integration, container_integration]
        uses: ./.github/workflows/container_delivery.yaml
        # environment: --> cannot be used in a job calling a subworkflow. 
        # Hacky solution: Needs the 'expose_vars' job to collect env values and inject it below by consuming the ouput of the job
        with:
            files: |           
                ./frontend/**
                ./backend/**
            files_ignore: |
                **/*.md
            # we consider 'integration' as the default environment in this main workflow
            environment: integration
            project_id: ${{ needs.expose_vars.outputs.PROJECT_ID }}
            repository_id: ${{ needs.expose_vars.outputs.REPOSITORY_ID }} 
            workload_identity_provider: ${{ needs.expose_vars.outputs.WORKLOAD_IDENTITY_PROVIDER }}
            service_account_to_impersonate: ${{ needs.expose_vars.outputs.SA_TO_IMPERSONATE }}
            region: ${{ needs.expose_vars.outputs.CLOUD_REGION }}

            
    workloads_deployment:
        needs: [expose_vars, container_delivery]
        uses: ./.github/workflows/workload_deployment.yaml
        with:
            environment: integration
            project_id: ${{ needs.expose_vars.outputs.PROJECT_ID }}
            repository_id: ${{ needs.expose_vars.outputs.REPOSITORY_ID }} 
            workload_identity_provider: ${{ needs.expose_vars.outputs.WORKLOAD_IDENTITY_PROVIDER }}
            service_account_to_impersonate: ${{ needs.expose_vars.outputs.SA_TO_IMPERSONATE }}
            cloud_region: ${{ needs.expose_vars.outputs.CLOUD_REGION }}
            tag: ${{ github.sha }}


    # TODO: call this same workflow (or an adapted version) that deliver (and not deploy) images on {staging; production} environments
    # To call only if we need to decorelate artifactory repo between environements --> because image content would depends on the environment and we want to avoid at all cost to put the environment name in the tag.  
    # tag should be similar between the different repositories
    # --> NOPE: this is taken into account by the release creation workflow. Artifactory other than integration would contains only release tags

    # TODO: final job : push the badge status. This task should always run even in case of previous task failure