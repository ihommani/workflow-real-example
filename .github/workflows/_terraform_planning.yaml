name: Terraform planning
run-name: '${{ github.actor }} run Terraform code integration'

on:
    workflow_call:
        inputs:
            environment:
                description: Targeted environment for infrastructure deployment
                type: string
                required: true
            root-module-path:
                description: Path of the terraform root module to apply linting on
                type: string
                required: true
            terraform-version:
                description: Terraform version to install
                required: true
                type: string

jobs:

    updated-infrastructure-cost:
        runs-on: ubuntu-22.04
        defaults:
          run:
              working-directory: ./${{ inputs.root-module-path }}
        steps:
          - uses: actions/checkout@v4
          # TODO infracost https://github.com/infracost/actions

    terraform-planification:
        environment: 
          name: ${{ inputs.environment }}
        runs-on: ubuntu-22.04
        defaults:
            run:
                working-directory: ./${{ inputs.root-module-path }}
        permissions: 
            pull-requests: write
            contents: read
            id-token: write
        steps:
            - uses: actions/checkout@v4

            - name: setup terraform
              id: setup_terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: ${{ inputs.terraform-version }}

            - name: Authenticate to gcp workload identity pool
              id: auth_to_google
              uses: 'google-github-actions/auth@v2'
              with:
                  workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
                  service_account: ${{ vars.SA_TO_IMPERSONATE }}
                  create_credentials_file: true 

            - name: Terraform init
              id: terraform_init
              run: terraform init

            - name: Terraform plan
              id: terraform_plan
              run: terraform plan -no-color
              continue-on-error: true

              # TODO: adapt to call in a higher level workflow and to condition to the github event. 
            - uses: actions/github-script@v7  
              if: false
              env: 
                PLAN: "terraform\n${{ steps.terraform_plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    // 1. Retrieve existing bot comments for the PR
                    const { data: comments } = await github.rest.issues.listComments({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.issue.number,
                    })
                    const botComment = comments.find(comment => {
                      return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                    })
                            
                    // 2. Prepare format of the comment
                    const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                    #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                    #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                    <details><summary>Validation Output</summary>
                            
                    \`\`\`\n
                    ${{ steps.validate.outputs.stdout }}
                    \`\`\`
                            
                    </details>
                            
                    #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
                            
                    <details><summary>Show Plan</summary>
                            
                    \`\`\`\n
                    ${process.env.PLAN}
                    \`\`\`
                            
                    </details>
                            
                    *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
                            
                    // 3. If we have a comment, update it, otherwise create a new one
                    if (botComment) {
                      github.rest.issues.updateComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: botComment.id,
                        body: output
                      })
                    } else {
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                      })
                    }

        
                