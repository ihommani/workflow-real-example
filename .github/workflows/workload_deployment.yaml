name: Workload deployment
run-name: '${{ github.actor }} triggers workload deployment'
 
# TODO: to document: service name take the name of the folder containing "Dockerfile". It's a contract we have with the infrastructure. Cloud run service must already exists.
# Same thing with the job. They must exist and their name is on the "Dockerfile_[job_name]" itself

on: 
  workflow_call:
    inputs:
      environment:
          description: Environment where we deploy
          type: string
          required: true
      workload_identity_provider:
          description: |-
            Identifier of the concrete workload identity provider. 
          required: true
          type: string
      service_account_to_impersonate:
          description: |-
            Identity to impersonate through the workload identity provider
          required: true
          type: string
      cloud_region:
          description: |-
            Region of the concrete workload cloud hosting service
          required: true
          type: string
      project_id:
          description: id of the project entity hosting image repository
          required: true
          type: string
      repository_id:
          description: Image repository id
          required: true
          type: string
      tag:
          description: 'which tag to apply'
          type: string
          required: false
          default: latest

jobs:
    
    list_docker_files:
      runs-on: ubuntu-22.04
      outputs:
        docker_files: ${{ steps.list_docker_file_path.outputs.docker_files }}
      steps:
        - uses: actions/checkout@v4

        - name: list_docker_file_path
          id: list_docker_file_path
          uses: ./.github/actions/list_docker_files

      
    workloads_deployment:
      needs: [list_docker_files]
      uses: ./.github/workflows/_cloudrun_deployment.yaml
      strategy:
          matrix:
            docker_file_path: ${{ fromJson(needs.list_docker_files.outputs.docker_files) }}
      with:
          environment: ${{ inputs.environment }}
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account_to_impersonate: ${{ inputs.service_account_to_impersonate }} 
          cloud_region: ${{ inputs.cloud_region }}
          project_id: ${{ inputs.project_id }}
          repository_id: ${{ inputs.repository_id }}
          tag: ${{ inputs.tag }}
          docker_file_path: ${{ matrix.docker_file_path }}
