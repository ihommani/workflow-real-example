name: Workload deployment
run-name: '${{ github.actor }} triggers workload deployment'
 
# TODO: to document: # whatever happens, we deploy on the current sha1
# to document: service name take the name of the folder containing "Dockerfile". It's a contract we have with the infrastructure. Cloud run service must already exists.
# Same thing with the job. They must exist and their name is on the "Dockerfile_[job_name]" itself

on: 
  workflow_dispatch: 
    inputs:
        environment:
            description: On what environment to deploy the targeted version
            options:
                - integration
                - staging
                - production
            type: choice
            required: true
            default: integration
  workflow_call: # TODO : set the environemnt as an input.along with repository id and so on. 
    inputs:
      environment:
          description: Environment where we deploy
          type: string
          required: true
      tag:
          description: 'which tag to apply'
          type: string
          required: false
          default: latest

jobs:
    get_env_var_of_interest:
      uses: ./.github/workflows/_get_env_var_of_interest.yaml
      with:
        environment: ${{ inputs.environment }}

    get_images_common_tag:
      runs-on: ubuntu-22.04
      outputs:
        common_tag_to_deploy: ${{ steps.common_tag.outputs.common_tag_to_deploy }}
      steps:
        - name: Get common tag for deployment
          id: common_tag
          run: |- # TODO: to check on dispath what is the event_name
            if [ ${{ github.event_name }} = push ]; then
              common_tag_to_deploy=${{ github.sha }}
            elif [ ${{ github.event_name }} = workflow_dispatch ]; then
              common_tag_to_deploy=${{ github.ref_name }}
            fi
            echo "common tag to deploy: ${common_tag_to_deploy}"
            echo "common_tag_to_deploy=${common_tag_to_deploy}" >> $GITHUB_OUTPUT
    

    get_docker_files:
      runs-on: ubuntu-22.04
      outputs:
        docker_files: ${{ steps.list_docker_file_path.outputs.docker_files }}
      steps:
        - uses: actions/checkout@v4

        - name: list_docker_file_path
          id: list_docker_file_path
          uses: ./.github/actions/get_docker_files

      
    workloads_deployment:
      needs: [get_docker_files, get_env_var_of_interest, get_images_common_tag]
      uses: ./.github/workflows/_cloudrun_deployment.yaml
      strategy:
          matrix:
            docker_file_path: ${{ fromJson(needs.get_docker_files.outputs.docker_files) }}
      with:
          environment: ${{ inputs.environment }}
          workload_identity_provider: ${{ needs.get_env_var_of_interest.outputs.workload_identity_provider }}
          service_account_to_impersonate: ${{ needs.get_env_var_of_interest.outputs.service_account_to_impersonate }}
          cloud_region: ${{ needs.get_env_var_of_interest.outputs.region }}
          project_id: ${{ needs.get_env_var_of_interest.outputs.project_id }}
          repository_id: ${{ needs.get_env_var_of_interest.outputs.repository_id }}
          tag: ${{ needs.get_images_common_tag.outputs.common_tag_to_deploy }}
          docker_file_path: ${{ matrix.docker_file_path }}
