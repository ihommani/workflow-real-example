name: Nextjs application integration
run-name: "${{ github.actor }} run nextjs application integration"

on:
    workflow_call:
        inputs:
            node-version:
                description: "Node version to setup"
                type: string
                required: true
                default: "20"


jobs:
    build:
        runs-on: ubuntu-22.04
        steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Detect package manager
            id: detect-package-manager
            run: |
              if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                echo "manager=yarn" >> $GITHUB_OUTPUT
                echo "command=install" >> $GITHUB_OUTPUT
                echo "runner=yarn" >> $GITHUB_OUTPUT
                exit 0
              elif [ -f "${{ github.workspace }}/package.json" ]; then
                echo "manager=npm" >> $GITHUB_OUTPUT
                echo "command=ci" >> $GITHUB_OUTPUT
                echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "Unable to determine package manager"
                exit 1
              fi
          - name: Setup Node
            uses: actions/setup-node@v4
            with:
              node-version: ${{ inputs.node-version}}
              cache: ${{ steps.detect-package-manager.outputs.manager }}
          - name: Restore cache
            uses: actions/cache@v4
            with:
              path: |
                .next/cache
                # Generate a new cache whenever packages or source files change.
                key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                # If source files changed but packages didn't, rebuild from a prior cache.
                restore-keys: |
                  ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
          - name: Lint code
            # run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            run: echo "lint nest application code"
          - name: Run test
            # run: ${{ steps.detect-package-manager.outputs.runner }} next build
            run: echo "Run nestjs test code"