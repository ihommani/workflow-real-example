name: Gcloud Tag images
description: |
 Ensure we have the tag corresponding to trigger event's sha1 if no new image have been pushed. Assign tag 'latest' to the current event's sha1

inputs:
    workload_identity_provider:
      description: |-
        Workload identity pool provider.
      required: true
    service_account_to_impersonate:
      description: |-
        Google service account to impersonate while authenticating to Google through the workload identity pool
      required: true
    image_name:
        description: |-
          Tagged image name
        required: true
    semver_tag:
      description: |-
        Semver compliant tag to apply
      required: false

runs:
    using: "composite"
    steps:
        - name: Checkout
          id: checkout
          uses: actions/checkout@v4

        - name: Authenticate to gcp workload identity pool
          id: auth_to_google
          uses: google-github-actions/auth@v2
          with:
              workload_identity_provider: ${{ inputs.workload_identity_provider }}
              service_account: ${{ inputs.service_account_to_impersonate }}
              access_token_lifetime: 300s
              create_credentials_file: true

        # Does not work with access token. Only through credential file. For this reason we can't define an access token as an input and we require the previous auth action
        - name: Set up Cloud SDK
          id: set_up_gcloud_sdk
          uses: google-github-actions/setup-gcloud@v2
    
        - name: Set tag sha1 if it does not exist # the image has not been built because no source has changed. Tag latest should exist
          id: create_sha1_tag
          shell: bash
          run: |
            echo "If not exist, adding sha1 tag at the same level than tag latest"
            [ -z $(gcloud artifacts docker tags list ${{ inputs.image_name }} --format="csv(tag)" | grep "${{ github.sha }}") ] && gcloud artifacts docker tags add ${{ inputs.image_name }}:latest ${{ inputs.image_name }}:${{ github.sha }} || echo "sha1 tag exists"

        - name: Delete tag latest if exist
          id: delete_tag_latest_if_exist
          continue-on-error: true
          shell: bash
          run: |-
            echo "Deleting tag latest"
            gcloud artifacts docker tags delete ${{ inputs.image_name }}:latest

        - name: Align tag latest to the current sha1 tag
          id: align_tag_latest
          shell: bash
          run: |-
            echo "Align tag latest to the current sha1 tag"
            gcloud artifacts docker tags add ${{ inputs.image_name }}:${{ github.sha }} ${{ inputs.image_name }}:latest
          
        - name: Delete semver tag if exist
          if: inputs.semver_tag != ''
          id: delete_semver
          continue-on-error: true
          shell: bash
          run: |-
            echo "Trying to delete tag ${{ inputs.semver_tag }}"
            gcloud artifacts docker tags delete ${{ inputs.image_name }}:${{ inputs.semver_tag }}

        - name: Adding semver tag at level latest / current sha1
          if: inputs.semver_tag != ''
          id: adding_semver_tag
          shell: bash
          run: |-
            echo "Adding tag ${{ inputs.semver_tag }}"
            gcloud artifacts docker tags add ${{ inputs.image_name }}:latest ${{ inputs.image_name }}:${{ inputs.semver_tag }}